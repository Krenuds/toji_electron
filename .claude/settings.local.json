{
  "permissions": {
    "allow": [
      "Bash(npm run format:*)",
      "Read(//c/Users/donth/AppData/Roaming/toji3/logs/**)",
      "Bash(npm run typecheck:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run lint:*)",
      "WebFetch(domain:opencode.ai)"
    ],
    "deny": [],
    "ask": []
  },
  "hooks": {
    "SessionStart": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo üöÄ TOJI3 SESSION STARTED && echo üìÅ Project: Toji3 && echo üïí Time: %date% %time% && echo. && echo üìö MANDATORY PRE-WORK CHECKLIST: && echo ‚úÖ Read recent commits: git log --oneline -4 && echo ‚úÖ Check OpenCode docs: https://opencode.ai/docs/sdk/ && echo ‚úÖ Review Electron-Vite: https://electron-vite.org/guide/ && echo ‚úÖ Check Chakra UI v3: https://chakra-ui.com/docs/get-started/frameworks/vite && echo."
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo üîß TOJI3 CONTEXT INJECTION: && echo. && echo üéØ PROJECT: Electron + React + TypeScript + Chakra UI v3 + OpenCode SDK && echo üì¶ STACK: Electron 37.2, React 19.1, TypeScript 5.8, Chakra UI 3.27 && echo ‚ö° ARCHITECTURE: Plugin-based (Main process = business logic, Renderer = UI plugin) && echo. && echo üî¥ CRITICAL WORKFLOW ENFORCEMENT: && echo 1Ô∏è‚É£ FORMAT FIRST: npm run format (ALWAYS run before coding) && echo 2Ô∏è‚É£ LINT ALWAYS: npm run lint:fix then npm run lint && echo 3Ô∏è‚É£ TYPECHECK: npm run typecheck (MUST pass before commits) && echo 4Ô∏è‚É£ NO any TYPES: Everything must be strictly typed && echo 5Ô∏è‚É£ CHAKRA UI v3 ONLY: No inline styles, no CSS files, use MCP tools && echo. && echo üèóÔ∏è FEATURE WORKFLOW (MANDATORY ORDER): && echo ‚Üí 1. API Layer (/src/main/toji/) && echo ‚Üí 2. IPC Handlers (/src/main/index.ts) && echo ‚Üí 3. Preload Bridge (/src/preload/) && echo ‚Üí 4. UI Components (/src/renderer/) && echo ‚Üí 5. Test & Quality Check"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Write|Edit",
        "hooks": [
          {
            "type": "command",
            "command": "echo üìù ABOUT TO MODIFY FILES: %CLAUDE_FILE_PATHS% && echo ‚ö†Ô∏è REMINDER: Follow TypeScript strict mode, NO any types, Chakra UI v3 only"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo üîß Bash command detected - Remember: format ‚Üí lint:fix ‚Üí lint ‚Üí typecheck workflow"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit",
        "hooks": [
          {
            "type": "command",
            "command": "echo ‚úÖ CODE FILES MODIFIED: %CLAUDE_FILE_PATHS% && echo üî• MANDATORY NEXT STEPS: && echo 1. npm run format && echo 2. npm run lint:fix && echo 3. npm run lint (must show 0 errors) && echo 4. npm run typecheck (must pass) && echo. && echo üí° TIP: Run these NOW before continuing!"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo ‚úÖ Bash command completed"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo üèÅ SESSION COMPLETE && echo. && echo üìã FINAL QUALITY CHECKLIST: && echo ‚ñ° npm run format (code formatting) && echo ‚ñ° npm run lint (0 errors required) && echo ‚ñ° npm run typecheck (must pass) && echo ‚ñ° npm run dev (test functionality) && echo ‚ñ° Clear commit message planned && echo. && echo üéØ Architecture reminder: Main process = business logic, UI = thin plugin && echo üíæ Don't forget: Follow feature workflow order for any new functionality"
          }
        ]
      }
    ]
  }
}