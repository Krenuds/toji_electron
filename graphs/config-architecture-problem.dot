digraph ConfigArchitecture {
  rankdir=TB;
  node [shape=box, style=filled];

  subgraph cluster_current {
    label="CURRENT ARCHITECTURE (BROKEN)\n❌ Two modules write to opencode.json";
    style=filled;
    color=lightcoral;

    // Nodes
    Toji1 [label="Toji.connectClient()", fillcolor=lightblue];
    MCP1 [label="McpManager\n.createServerForProject()", fillcolor=orange];
    ConfigFile1 [label="opencode.json\n(FILE)", shape=cylinder, fillcolor=yellow];
    ConfigMgr1 [label="ConfigManager\n.persistConfigToFile()", fillcolor=lightgreen];
    OpenCode1 [label="OpenCode Server\nReads Config", fillcolor=lightgrey];

    // Flow
    Toji1 -> MCP1 [label="1. Create MCP"];
    MCP1 -> ConfigFile1 [label="⚠️ WRITES\n(line 374)", color=red, penwidth=3];
    Toji1 -> ConfigMgr1 [label="2. Update config\n(later)"];
    ConfigMgr1 -> ConfigFile1 [label="⚠️ ALSO WRITES\n(race condition!)", color=red, penwidth=3];
    ConfigFile1 -> OpenCode1 [label="Reads", style=dashed];

    // Problems
    Problem1 [label="PROBLEMS:\n• Two writers = race condition\n• MCP owns config logic\n• Tight coupling\n• Hard to test",
              shape=note, fillcolor=pink];
    MCP1 -> Problem1 [style=dotted, color=red];
  }

  subgraph cluster_proposed {
    label="PROPOSED ARCHITECTURE (FIXED)\n✅ Single source of truth for config";
    style=filled;
    color=lightgreen;

    // Nodes
    Toji2 [label="Toji.connectClient()", fillcolor=lightblue];
    MCP2 [label="McpManager\n.createServerForProject()", fillcolor=orange];
    MCPReturn [label="Returns:\n{port, server}", shape=plaintext];
    ConfigMgr2 [label="ConfigManager\n.registerMcpServer()", fillcolor=lightgreen];
    ConfigFile2 [label="opencode.json\n(FILE)", shape=cylinder, fillcolor=yellow];
    OpenCode2 [label="OpenCode Server\nReads Config", fillcolor=lightgrey];

    // Flow
    Toji2 -> MCP2 [label="1. Create MCP\n(NO file write)"];
    MCP2 -> MCPReturn [style=dashed];
    MCPReturn -> ConfigMgr2 [label="2. Register\nMCP config"];
    ConfigMgr2 -> ConfigFile2 [label="✅ SINGLE WRITER\n(no race!)", color=green, penwidth=3];
    ConfigFile2 -> OpenCode2 [label="Reads", style=dashed];

    // Benefits
    Benefit [label="BENEFITS:\n• Single writer = no races\n• Clean separation\n• Easy to test\n• Maintainable",
             shape=note, fillcolor=lightgreen];
    ConfigMgr2 -> Benefit [style=dotted, color=green];
  }

  // Legend
  subgraph cluster_legend {
    label="LEGEND";
    style=filled;
    color=white;

    L1 [label="Component", shape=box];
    L2 [label="Data/File", shape=cylinder];
    L3 [label="Problem", shape=note, fillcolor=pink];
    L4 [label="Write Operation", color=red];
    L5 [label="Safe Operation", color=green];
  }
}
